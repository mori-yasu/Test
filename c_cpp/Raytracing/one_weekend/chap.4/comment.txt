背景に球のヒット判定を追加

Chapter 4: Adding a sphere
Let’s add a single object to our ray tracer. People often use spheres in ray tracers because
calculating whether a ray hits a sphere is pretty straightforward. Recall that the equation for a
sphere centered at the origin of radius R is x*x + y*y + z*z = R*R. The way you can read that
equation is “for any (x, y, z), if x*x + y*y + z*z = R*R then (x,y,z) is on the sphere and otherwise
it is not”. It gets uglier if the sphere center is at (cx, cy, cz):
(x-cx)*(x-cx) + (y-cy)*(y-cy) + (z-cz)*(z-cz)= R*R
In graphics, you almost always want your formulas to be in terms of vectors so all the x/y/z stuff
is under the hood in the vec3 class. You might note that the vector from center C = (cx,cy,cz) to
point p = (x,y,z) is (p - C) . And dot((p - C) ,(p - C) ) = (x-cx)*(x-cx) + (y-cy)*(y-cy) + (z-cz)*(z-cz).
So the equation of the sphere in vector form is:
dot((p - c) ,(p - c)) = R*R
We can read this as “any point p that satisfies this equation is on the sphere”. We want to know
if our ray p(t) = A + t*B ever hits the sphere anywhere. If it does hit the sphere, there is some t
for which p(t) satisfies the sphere equation. So we are looking for any t where this is true:
dot((p( t) - c) ,(p( t) - c)) = R*R
or expanding the full form of the ray p( t) :
dot((A + t*B - C) ,(A + t*B - C)) = R*R
The rules of vector algebra are all that we would want here, and if we expand that equation and
move all the terms to the left hand side we get:
t*t*dot(B, B) + 2*t*dot(B,A-C) + dot(A-C,A-C) - R*R = 0
The vectors and R in that equation are all constant and known. The unknown is t, and the
equation is a quadratic, like you probably saw in your high school math class. You can solve for
t and there is a square root part that is either positive (meaning two real solutions), negative
(meaning no real solutions), or zero (meaning one real solution). In graphics, the algebra almost
always relates very directly to the geometry. What we have is:
If we take that math and hard-code it into our program, we can test it by coloring red any pixel
that hits a small sphere we place at -1 on the z-axis:
What we get is this:
Now this lacks all sorts of things-- like shading and reflection rays and more than one object--
but we are closer to halfway done than we are to our start! One thing to be aware of is that we
tested whether the ray hits the sphere at all, but t < 0 solutions work fine. If you change your
sphere center to z = +1 you will get exactly the same picture because you see the things behind
you. This is not a feature! We’ll fix those issues next.

---------------------------------------------------------------------------------------------------------------------
第4章：球体の追加
単一のオブジェクトをレイトレーサーに追加しましょう。人々はしばしばレイトレーサーで球体を使用します
光線が球に当たるかどうかを計算するのは非常に簡単です。の方程式は
半径Rの原点を中心とする球体は、x * x + y * y + z * z = R * Rです。あなたがそれを読むことができる方法
方程式は「任意の（x、y、z）に対して、x * x + y * y + z * z = R * Rの場合、（x、y、z）は球上にあり、それ以外の場合は
そうではない"。球体の中心が（cx、cy、cz）にある場合はくなります：
（x-cx）*（x-cx）+（y-cy）*（y-cy）+（z-cz）*（z-cz）= R * R
グラフィックスでは、ほとんどの場合、式はベクトルの観点から求められるため、すべてのx / y / zの要素は
vec3クラスの内部にあります。中心C =（cx、cy、cz）から
ポイントp =（x、y、z）は（p-C）です。そしてdot（（p-C）、（p-C））=（x-cx）*（x-cx）+（y-cy）*（y-cy）+（z-cz）*（z-cz ）。
したがって、ベクトル形式の球の方程式は次のとおりです。
dot（（p-c）、（p-c））= R * R
これは、「この方程式を満たす点pはすべて球上にある」と読むことができます。私たちは知りたい
光線p（t）= A + t * Bがどこでも球体に当たる場合。それが球に当たった場合、いくつかのtがあります
p（t）は球方程式を満たします。したがって、これが当てはまるものを探しています。
dot（（p（t）-c）、（p（t）-c））= R * R
または、光線p（t）の完全な形式を展開します。
dot（（A + t * B-C）、（A + t * B-C））= R * R
ベクトル代数のルールはここで必要なものすべてであり、その方程式を展開すると
すべての用語を左側に移動します：
t * t * dot（B、B）+ 2 * t * dot（B、A-C）+ dot（A-C、A-C）-R * R = 0
その方程式のベクトルとRはすべて定数であり、既知です。未知はtであり、
方程式は、おそらく高校の数学の授業で見たような二次方程式です。あなたが解決することができます
tおよび正（2つの実数解を意味する）、負のいずれかである平方根部分があります。
（実際の解がないことを意味する）、またはゼロ（1つの実際の解を意味する）。グラフィックスでは、代数はほとんど
常にジオメトリに直接関連しています。私たちが持っているものは：
その計算をプログラムにハードコーディングすると、任意のピクセルを赤く着色してテストできます
これは、z軸の-1に配置した小さな球に当たります。
私たちが得るのはこれです：
現在、これにはあらゆる種類のものがありません-シェーディングや反射光線、複数のオブジェクトなど-
しかし、私たちは最初の段階よりも中途半端に近づいています！知っておくべきことの1つは、
光線が球体に当たるかどうかをテストしましたが、t <0のソリューションは正常に機能します。変更する場合
球の中心をz = +1にすると、背後のものが見えるため、まったく同じ画像が得られます
君は。これは機能ではありません！次にこれらの問題を修正します。