Chapter 0: Overview
I’ve taught many graphics classes over the years. Often I do them in ray tracing, because you
are forced to write all the code but you can still get cool images with no API. I decided to adapt
my course notes into a how-to, to get you to a cool program as quickly as possible. It will not be
a full-featured ray tracer, but it does have the indirect lighting which has made ray tracing a
staple in movies. Follow these steps, and the architecture of the ray tracer you produce will be
good for extending to a more extensive ray tracer if you get excited and want to pursue that.
When somebody says “ray tracing” it could mean many things. What I am going to describe is
technically a path tracer, and a fairly general one. While the code will be pretty simple (let the
computer do the work!) I think you’ll be very happy with the images you can make.
I’ll take you through writing a ray tracer in the order I do it, along with some debugging tips. By
the end, you will have a ray tracer that produces some great images. You should be able to do
this in a weekend. If you take longer, don’t worry about it. I use C++ as the driving language,
but you don’t need to. However, I suggest you do, because it’s fast, portable, and most
production movie and video game renderers are written in C++. Note that I avoid most “modern
features” of C++, but inheritance and operator overloading are too useful for ray tracers to pass
on. I do not provide the code online, but the code is real and I show all of it except for a few
straightforward operators in the vec3 class. I am a big believer in typing in code to learn it, but
when code is available I use it, so I only practice what I preach when the code is not available.
So don’t ask!
I have left that last part in because it is funny what a 180 I have done. Several readers ended
up with subtle errors that were helped when we compared code. So please do type in the
code, but if you want to look at mine it is at:
https://github.com/petershirley/raytracinginoneweekend
I assume a little bit of familiarity with vectors (like dot product and vector addition). If you don’t
know that, do a little review. If you need that review, or to learn it for the first time, check out
Marschner’s and my graphics text, Foley, Van Dam, et al., or McGuire’s graphics codex.
If you run into trouble, or do something cool you’d like to show somebody, send me some email
at ptrshrl@gmail.com
I’ll be maintaining a site related to the book including further reading and links to resources at a
blog in1weekend related to this book.
Let’s get on with it

--------------------------------------------------------------------------------------------------------------
章0：概要
私は長年にわたって多くのグラフィッククラスを教えてきました。多くの場合、レイトレーシングでそれらを行います。
すべてのコードを書くことを余儀なくされますが、APIを使用せずにクールな画像を取得できます。適応することにしました
私のコースでは、できるだけ早くクールなプログラムを利用できるようにするためのハウツーについて説明します。なりません
フル機能のレイトレーサーですが、レイトレーシングを行う間接照明があります。
映画の定番。次の手順を実行すると、作成するレイトレーサーのアーキテクチャは次のようになります。
興奮してそれを追求したい場合、より広範なレイトレーサーに拡張するのに適しています。
誰かが「レイトレーシング」と言うとき、それは多くのことを意味します。説明するのは
技術的にはパストレーサーであり、かなり一般的なものです。コードは非常に単純ですが（
コンピューターが作業を行います！）作成できる画像に非常に満足していると思います。
デバッグのヒントとともに、レイトレーサーを作成した順序で作成します。沿って
最後に、素晴らしい画像を生成するレイトレーサーがあります。あなたはできるはずです
これは週末に。もっと時間がかかっても心配する必要はありません。駆動言語としてC ++を使用し、
必要ありませんただし、高速で移植性が高く、ほとんどの場合、
プロダクションムービーおよびビデオゲームレンダラーはC ++で記述されています。ほとんどの「現代
C ++の機能」ですが、継承と演算子のオーバーロードは、レイトレーサーが渡すにはあまりにも便利です
オン。私はオンラインでコードを提供しませんが、コードは本物であり、いくつかを除いてすべてを表示します
vec3クラスの単純な演算子。私はそれを学ぶためにコードを入力することを大いに信じていますが、
コードが利用可能になるとそれを使用するので、コードが利用できない場合にのみ説教を実践します。
だから聞かないで！
私がやった180がおかしいので、私はその最後の部分を残しました。複数の読者が終了しました
コードを比較したときに助けられた微妙なエラーが発生しました。で入力してください
コードですが、もしあなたが私のものを見たいなら、それは：
https://github.com/petershirley/raytracinginoneweekend
ベクトル（ドット積やベクトル加算など）に少し慣れていると思います。しない場合
それを知って、少しレビューをしてください。そのレビューが必要な場合、または初めて学ぶ場合は、チェックアウトしてください
Marschnerと私のグラフィックテキスト、Foley、Van Damなど、またはMcGuireのグラフィックコーデックス。
問題が発生した場合、または誰かに見せたいことをしたい場合は、メールを送ってください
ptrshrl@gmail.com
私は本に関連するサイトを維持し、さらに読むことや、リソースへのリンクを含めます。
この本に関連するブログin1weekend。
それで始めましょう
