Chapter 6: Antialiasing
When a real camera takes a picture, there are usually no jaggies along edges because the edge
pixels are a blend of some foreground and some background. We can get the same effect by
averaging a bunch of samples inside each pixel. We will not bother with stratification, which is
controversial but is usual for my programs. For some ray tracers it is critical, but the kind of
general one we are writing doesn’t benefit very much from it and it makes the code uglier. We
abstract the camera class a bit so we can make a cooler camera later.
One thing we need is a random number generator that returns real random numbers. C++ did
not traditionally have a standard random number generator but most systems have drand48()
tucked away someplace and that is what I use here. However, newer versions of C++ have
addressed this issue with the <random> header (if imperfectly according to some experts).
Whatever your infrastructure, find a function that returns a canonical random number which by
convention returns random real in the range 0 <= ran < 1. The “less than” before the 1 is
important as we will sometimes take advantage of that.
For a given pixel we have several samples within that pixel and send rays through each of the
samples. The colors of these rays are then averaged:

Putting that all together yields a camera class encapsulating our simple axis-aligned camera
from before:

Main is also changed:

Zooming into the image that is produced, the big change is in edge pixels that are part
background and part foreground:

--------------------------------------------------------------------------------------------------------
第6章：アンチエイリアス
実際のカメラが写真を撮るとき、エッジに沿ってジャギーは通常ありません
ピクセルは、前景と背景のブレンドです。同じ効果を得るには
各ピクセル内の多数のサンプルを平均します。層別化は気にしません。
物議を醸すが、私のプログラムでは普通です。一部のレイトレーサーにとっては重要ですが、
私たちが書いている一般的なものは、その恩恵をあまり受けず、コードをよりくします。私達
カメラクラスを少し抽象化して、後でよりクールなカメラを作成できるようにします。
必要なものの1つは、実際の乱数を返す乱数ジェネレータです。 C ++がやった
従来、標準の乱数ジェネレーターはありませんが、ほとんどのシステムにはdrand48（）があります
どこかに隠れて、それが私がここで使っているものです。ただし、C ++の新しいバージョンには
<ランダム>ヘッダーでこの問題に対処しました（一部の専門家によると不完全な場合）。
インフラストラクチャが何であれ、正規の乱数を返す関数を見つけます。
規則は、0 <= ran <1の範囲でランダムな実数を返します。1の前の「より小さい」は
時々それを利用するので重要です。
指定されたピクセルに対して、そのピクセル内にいくつかのサンプルがあり、それぞれの
サンプル。これらの光線の色は平均化されます：

これらをすべてまとめると、単純な軸合わせカメラをカプセル化するカメラクラスが生成されます
以前から：

メインも変更されます：

生成される画像を拡大すると、大きな変化は一部のエッジピクセルにあります
背景と前景：